@page "/authors/delete/{id}"
@attribute [Authorize(Roles = "Administrator")]
@inject IAuthorRepository _authorRepo
@inject NavigationManager _navManager


<h3 class="card-title">Sure to delete this Author?</h3>

@if (failed)
{
    <ErrorMessage Message="Something went wrong with delete"></ErrorMessage>
}

@if (_author == null)
{
    <LoadingMessage Message="Loading Author Details..."></LoadingMessage>
}
else
{
    <div class="col-md-4">
        <h4>Author Details</h4>
        <table class="table table-responsive">
            <tr>
                <td>First Name</td>
                <td>@_author.Firstname</td>
            </tr>
            <tr>
                <td>Last Name</td>
                <td>@_author.Lastname</td>
            </tr>
            <tr>
                <td>Biography</td>
                <td>@_author.Bio</td>
            </tr>
        </table>
        <br />
        @if (_author.Books == null || _author.Books.Count < 1)
        {
            <LoadingMessage Message="No books for this Author"></LoadingMessage>
        }
        else
        {
            <div class="card">
                <div class="card-header"><h4>Books</h4></div>
                <ul class="list-group list-group-flush">
                    @foreach (var book in _author.Books)
                    {
                        <li class="list-group-item">@book.Title - @book.Price</li>
                    }
                </ul>
            </div>
        }
    </div>
}

<button class="btn btn-danger" @onclick="DeleteAuthor">
    <span class="oi oi-delete"></span>
    Delete
</button> |
<button class="btn btn-primary" @onclick="BackToList">
    <span class="oi oi-media-skip-backward"></span>
    Back To List
</button>


@code {
    [Parameter]
    public string Id { get; set; }

    private Author _author;

    private bool failed = false;

    protected override async Task OnInitializedAsync()
    {
        int id = Convert.ToInt32(Id);

        _author = await _authorRepo.Get(Bookstore_UI.Static.Endpoints.AuthorsEndpoint, id);
    }

    private void BackToList()
    {
        _navManager.NavigateTo("/authors/");
    }

    private async Task DeleteAuthor()
    {
        bool success = await _authorRepo.Delete(Bookstore_UI.Static.Endpoints.AuthorsEndpoint, Convert.ToInt32(Id));

        if (success)
        {
            BackToList();
        }
        else
        {
            failed = true;
        }
    }

}
