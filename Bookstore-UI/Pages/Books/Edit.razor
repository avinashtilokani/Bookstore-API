@page "/books/edit/{id}"

@attribute [Authorize(Roles = "Administrator")]

@inject IBookRepository _bookRepo
@inject IAuthorRepository _authorRepo
@inject IFileUpload _fileUpload
@inject NavigationManager _navManager
@inject IToastService _toastService

<h3>Edit Book</h3>
<br />
@if (string.IsNullOrWhiteSpace(Id) || int.Parse(Id) < 1)
{
    <ErrorMessage Message="Invalid selection. Please try again."></ErrorMessage>
}
else if (_book == null)
{
    <LoadingMessage Message="Loading book details..."></LoadingMessage>
}
else
{
<EditForm Model="_book" OnValidSubmit="HandleUpdate">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="title">Book Title</label>
        <InputText @bind-Value="_book.Title" class="form-control" id="title" />
    </div>
    <div class="form-group">
        <label for="isbn">ISBN</label>
        <InputText @bind-Value="_book.ISBN" class="form-control" id="isbn" />
    </div>
    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber @bind-Value="_book.Price" class="form-control" id="price" />
    </div>
    <div class="form-group">
        <label for="author">Authors</label>
        <select @bind="_book.AuthorId" class="form-control" id="author">
            <option value="">-- Select Author --</option>
            @if (Authors != null)
            {
                foreach (var author in Authors)
                {
                    <option value="@author.Id">@author.Firstname @author.Lastname</option>
                }
            }
        </select>
    </div>
    <div class="form-group">
        <label for="summary">Summary</label>
        <InputTextArea @bind-Value="_book.Summary" class="form-control" id="summary" />
    </div>
    <div class="form-group">
        <label for="bookcover">Book Cover Photo</label>
        <InputFile OnChange="HandleFileSelection" />
        @if (isInvalidFileType)
        {
            <ErrorMessage Message="Please remove the invalid file type and select as new image, or leave this field blank" />
        }
        @if (!string.IsNullOrWhiteSpace(imageDataURL))
        {
            <img src="@imageDataURL" style="height:100px;width:100px" />
        }
        else if (!string.IsNullOrEmpty(_book.Image))
        {
            <img src="uploads/@_book.Image" style="height:100px;width:100px" />
        }
    </div>
    <button class="btn btn-primary" type="submit">
        <span class="oi oi-pencil"></span>
        Create Book
    </button>
    <button @onclick="BackToList" class="btn btn-outline-secondary">
        <span class="oi oi-media-skip-backward"></span>
        Back To List
    </button>
</EditForm>
}

@code {
    [Parameter]
    public string Id { get; set; }
    private IList<Author> Authors;
    private IFileListEntry file;
    private bool isSuccess = true;
    private bool isInvalidFileType = false;
    private string imageDataURL;
    private System.IO.MemoryStream msFile;
    private bool isFileChanged;

    private Book _book;

    protected override async Task OnInitializedAsync()
    {
        int id = Convert.ToInt32(Id);

        _book = await _bookRepo.Get(Bookstore_UI.Static.Endpoints.BooksEndpoint, id);

        Authors = await _authorRepo.Get(Bookstore_UI.Static.Endpoints.AuthorsEndpoint);
    }

    private async Task HandleUpdate()
    {
        if (!isInvalidFileType)
        {
            if (file != null)
            {
                var ext = System.IO.Path.GetExtension(file.Name);
                var picId = Guid.NewGuid().ToString().Replace("-", "");
                var picName = $"{picId}{ext}";

                _fileUpload.RemoveFile(_book.Image);
                await _fileUpload.UploadFile(file, msFile, picName);

                _book.Image = picName;
            }
            else if(isFileChanged && file == null)
            {
                _fileUpload.RemoveFile(_book.Image);
                _book.Image = string.Empty;
            }

            isSuccess = await _bookRepo.Update(Bookstore_UI.Static.Endpoints.BooksEndpoint, _book, _book.Id);
            if (isSuccess)
            {
                _toastService.ShowSuccess("Book Updated");
                BackToList();
            }
        }
    }

    private async Task HandleFileSelection(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        isFileChanged = true;
        if (file != null)
        {
            var name = file.Name;
            if (name.Contains("jpg") || name.Contains("png") || name.Contains("jpeg"))
            {
                msFile = new System.IO.MemoryStream();
                await file.Data.CopyToAsync(msFile);

                var reader = new System.IO.StreamReader(file.Data);
                var imageBase64Data = Convert.ToBase64String(msFile.ToArray());
                imageDataURL = string.Format("data:image/png;base64,{0}", imageBase64Data);
                isInvalidFileType = false;
            }
            else
            {
                isInvalidFileType = true;
                imageDataURL = string.Empty;
            }
        }
        else
        {
            isInvalidFileType = false;
        }
    }

    private void BackToList()
    {
        _navManager.NavigateTo("/books/");
    }
}
