@page "/register"
@using Bookstore_UI.Models
@using Bookstore_UI.Contracts

@inject IAuthenticationRepository _authRepo
@inject NavigationManager _navManager


<h3 class="card-title">Register</h3>
@if (registrationFailed)
{
    <ErrorMessage Message="Something went wrong with registration"></ErrorMessage>
}
<div class="card-body">
    <EditForm Model="registrationModel" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="email">Email Address</label>
            <InputText Id="email" class="form-control"
                       @bind-Value="registrationModel.EmailAddress" />
            <ValidationMessage For="@(() => registrationModel.EmailAddress)" />
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <InputText Id="password" type="password" class="form-control"
                       @bind-Value="registrationModel.Password" />
            <ValidationMessage For="@(() => registrationModel.Password)" />
        </div>
        <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <InputText Id="confirmPassword" type="password" class="form-control"
                       @bind-Value="registrationModel.ConfirmPassword" />
            <ValidationMessage For="@(() => registrationModel.ConfirmPassword)" />
        </div>
        <button type="submit" class="btn btn-primary btn-block">Submit</button>
    </EditForm>
</div>


@code {
    private RegistrationModel registrationModel = new RegistrationModel();
    private bool registrationFailed = false;
    private async Task HandleRegistration()
    {
        var response = await _authRepo.Register(registrationModel);

        if (response)
        {
            _navManager.NavigateTo("/login");
        }
        else
        {
            registrationFailed = true;
        }
    }
}
